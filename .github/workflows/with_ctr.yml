name: "Main with CTR : Build & deploy"
on:
  workflow_dispatch:

  push:
    branches: [ "feat/improve_docker_publish" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs: 
      version: ${{ steps.build.outputs.version }}  

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ github.token }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'

      - name: Build a jar
        id: build
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=$GITHUB_SHA
          ./mvnw -V -B -ntp clean package -Pprod -DskipTests
          export VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      # docker images

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build multi platform images and loading them at the same time is not possible with default container runtime : https://github.com/docker/buildx/issues/59   
      # So let's use containerd instead as it supports this option
      # Also containerd is one of the option to allow preserving provenance attestations :https://docs.docker.com/build/attestations/#creating-attestations
      - name: Setup docker with containerd
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }              

      - name: Build & push 
        id: docker_build_and_push_by_digest
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: api
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          push: false
          tags: |
            kafka-ui:temp
          build-args: |
            JAR_FILE=api-${{ steps.build.outputs.version }}.jar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          outputs: type=oci,dest=/tmp/image.tar

      - name: Upload docker image
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: /tmp/image.tar
          retention-days: 1

  deploy-ghcr:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps: 
      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      # with containerd way
      - name: Set up containerd
        uses: crazy-max/ghaction-setup-containerd@v2       

      - name: Import image in containerd
        run: |
          sudo ctr i import --base-name kafka-ui --digests --all-platforms /tmp/image.tar
      
      - name: Push images to GHCR
        run: |
          sudo ctr image tag docker.io/library/kafka-ui:temp ghcr.io/giom-l/kafka-ui:main-ctr
          sudo ctr image tag docker.io/library/kafka-ui:temp ghcr.io/giom-l/kafka-ui:${{ needs.build.outputs.version }}-ctr
          sudo ctr image push --user "giom-l:${{ secrets.GITHUB_TOKEN }}" ghcr.io/giom-l/kafka-ui:main-ctr
          sudo ctr image push --user "giom-l:${{ secrets.GITHUB_TOKEN }}" ghcr.io/giom-l/kafka-ui:${{ needs.build.outputs.version }}-ctr

  deploy-dockerhub:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps: 
      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      # with containerd way
      - name: Set up containerd
        uses: crazy-max/ghaction-setup-containerd@v2       

      - name: Import image in containerd
        run: |
          sudo ctr i import --base-name kafka-ui --digests --all-platforms /tmp/image.tar
      
      - name: Push images to dockerhub
        run: |
          sudo ctr image tag docker.io/library/kafka-ui:temp docker.io/gocho/kafka-ui:main-dh
          sudo ctr image tag docker.io/library/kafka-ui:temp docker.io/gocho/kafka-ui:${{ needs.build.outputs.version }}-dh
          sudo ctr image push --user "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" docker.io/gocho/kafka-ui:main-dh
          sudo ctr image push --user "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" docker.io/gocho/kafka-ui:${{ needs.build.outputs.version }}-dh

