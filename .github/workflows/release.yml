name: "Infra: Release"
on:
  release:
    types: [ published ]

permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{steps.build.outputs.version}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ github.token }}

      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'

      - name: Build with Maven
        id: build
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.event.release.tag_name }}
          ./mvnw -B -V -ntp clean package -Pprod -DskipTests
          export VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: api/target/api-${{ steps.build.outputs.version }}.jar
          tag: ${{ github.event.release.tag_name }}

      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: kafbat-ui-${{ steps.build.outputs.version }}
          path: api/target/api-${{ steps.build.outputs.version }}.jar
      #################
      #               #
      # Docker images #
      #               #
      #################
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

     # Build multi platform images and loading them at the same time is not possible with default container runtime : https://github.com/docker/buildx/issues/59   
      # So let's use containerd instead as it supports this option
      # Also containerd is one of the option to allow preserving provenance attestations :https://docs.docker.com/build/attestations/#creating-attestations
      - name: Setup docker with containerd
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }         

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: api
          platforms: linux/amd64,linux/arm64
          provenance: mode=min
          sbom: true
          push: false
          load: true
          tags: |
            kafka-ui:temp
          build-args: |
            JAR_FILE=api-${{ steps.build.outputs.version }}.jar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Dump docker image
        run: |
          docker image save kafka-ui:temp > /tmp/image.tar
    
      - name: Upload docker image
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: /tmp/image.tar
          retention-days: 1

  deploy-ghcr:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      packages: write

    steps: 
      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      # setup containerd to preserve provenance attestations :https://docs.docker.com/build/attestations/#creating-attestations
      - name: Setup docker with containerd
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }     
                      
      - name: Load docker image into daemon
        run: |
          docker load --input /tmp/image.tar
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images to GHCR
        run: |
          docker tag kafka-ui:temp ghcr.io/kafbat/kafka-ui:latest
          docker tag kafka-ui:temp ghcr.io/kafbat/kafka-ui:${{ needs.release.outputs.version }}
          docker push ghcr.io/kafbat/kafka-ui:latest
          docker push ghcr.io/kafbat/kafka-ui:${{ needs.release.outputs.version }}

  deploy-dockerhub:
    runs-on: ubuntu-latest
    needs: release

    steps: 
      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      # setup containerd to preserve provenance attestations :https://docs.docker.com/build/attestations/#creating-attestations
      - name: Setup docker with containerd
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }     

      - name: Load docker image into daemon
        run: |
          docker load --input /tmp/image.tar

      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Push images to dockerhub
        run: |
          docker tag kafka-ui:temp docker.io/kafbat/kafka-ui:latest
          docker tag kafka-ui:temp docker.io/kafbat/kafka-ui:${{ needs.release.outputs.version }}
          docker push docker.io/kafbat/kafka-ui:latest
          docker push docker.io/kafbat/kafka-ui:${{ needs.release.outputs.version }}


  deploy-ecr:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read # To read secrets
      id-token: write # This is required for requesting the JWT

    steps: 
      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      # setup containerd to preserve provenance attestations :https://docs.docker.com/build/attestations/#creating-attestations
      - name: Setup docker with containerd
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }     

      - name: Load docker image into daemon
        run: |
          docker load --input /tmp/image.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1 # This region only for public ECR
          role-to-assume: ${{ secrets.AWS_ROLE }}

      - name: Login to public ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Push to ECR
        env:
          REGISTRY: ${{steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: j4u0y1h1
          REPOSITORY: kafka-ui
        run: |
          docker tag kafka-ui:temp $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
          docker tag kafka-ui:temp $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:${{ needs.release.outputs.version }}
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:${{ needs.release.outputs.version }}                    

  charts:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CHARTS_ACTIONS_TOKEN }}
          repository: kafbat/helm-charts
          event-type: prepare-helm-release
          client-payload: '{"appversion": "${{ needs.release.outputs.version }}"}'
